// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// iterate_layout
int iterate_layout(NumericMatrix xyr, NumericVector weights, double xmin, double xmax, double ymin, double ymax, int maxiter, bool wrap);
RcppExport SEXP _packcircles_iterate_layout(SEXP xyrSEXP, SEXP weightsSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP maxiterSEXP, SEXP wrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xyr(xyrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type wrap(wrapSEXP);
    rcpp_result_gen = Rcpp::wrap(iterate_layout(xyr, weights, xmin, xmax, ymin, ymax, maxiter, wrap));
    return rcpp_result_gen;
END_RCPP
}
// doCirclePack
List doCirclePack(List internalList, DataFrame externalDF);
RcppExport SEXP _packcircles_doCirclePack(SEXP internalListSEXP, SEXP externalDFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type internalList(internalListSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type externalDF(externalDFSEXP);
    rcpp_result_gen = Rcpp::wrap(doCirclePack(internalList, externalDF));
    return rcpp_result_gen;
END_RCPP
}
// do_progressive_layout
DataFrame do_progressive_layout(NumericVector radii);
RcppExport SEXP _packcircles_do_progressive_layout(SEXP radiiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    rcpp_result_gen = Rcpp::wrap(do_progressive_layout(radii));
    return rcpp_result_gen;
END_RCPP
}
// select_non_overlapping
LogicalVector select_non_overlapping(NumericMatrix xyr, const double tolerance, const StringVector& ordering);
RcppExport SEXP _packcircles_select_non_overlapping(SEXP xyrSEXP, SEXP toleranceSEXP, SEXP orderingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xyr(xyrSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type ordering(orderingSEXP);
    rcpp_result_gen = Rcpp::wrap(select_non_overlapping(xyr, tolerance, ordering));
    return rcpp_result_gen;
END_RCPP
}
